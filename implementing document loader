from langchain_community.document_loaders import TextLoader, PyPDFLoader
from langchain.schema import Document
import os
import logging
from typing import List

logging.basicConfig(level=logging.ERROR)

def load_documents(directory: str) -> List[Document]:
    """
    Load .txt and .pdf documents from a directory.
Args:
    directory (str): Path to the directory containing files.

    Returns:
    List[Document]: A list of LangChain Document objects.
    """
    documents = []

    try:
        for filename in os.listdir(directory):
            file_path = os.path.join(directory, filename)

            if filename.endswith(".txt"):
                loader = TextLoader(file_path)
                loaded_docs = loader.load()
                documents.extend(loaded_docs)
                  elif filename.endswith(".pdf"):
                loader = PyPDFLoader(file_path)
                loaded_docs = loader.load()
                documents.extend(loaded_docs)

    except FileNotFoundError:
        logging.error(f"Directory '{directory}' not found.")
    except Exception as e:
        logging.error(f"Error loading documents: {e}")
return documents


